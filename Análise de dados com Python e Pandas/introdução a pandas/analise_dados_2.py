# -*- coding: utf-8 -*-
"""Análise de dados com Python e Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uSj31j8NjjSJ8I7U3hRUU7DhnLhN87bB

# ***Trabalhando com Planilhas do Excel***
"""

import pandas as pd

#Leitura de Arquivo
df1 = pd.read_excel("/content/dataset/Recife.xlsx")
df2 = pd.read_excel("/content/dataset/Aracaju.xlsx")
df3 = pd.read_excel("/content/dataset/Fortaleza.xlsx")
df4 = pd.read_excel("/content/dataset/Natal.xlsx")
df5 = pd.read_excel("/content/dataset/Salvador.xlsx")

#Juntando todos os arquivos
df = pd.concat([df1,df2,df3,df4,df5])

#Exibindo os 5 primeiro
df.head()

#Exibindo os 5 ultimos da linha
df.tail()

#Cai um teste aleatorio
df.sample(5)

#Verificando o tipo de dado de cada coluna
df.dtypes

#Alterando o tipo de dado da coluna LojaID
df["LojaID"] = df["LojaID"].astype("object")

df.dtypes

"""# Tratando Valores Faltantes



"""

#Consultando linhas com valores faltante
df.isnull().sum()

#Substituindo os valores nulo pela média
df["Vendas"].fillna(df["Vendas"].mean(), inplace=True)

#Consultando linhas com valores faltante
df.isnull().sum()

#Substituindo os valores nulo por zero
df["Vendas"].fillna(0, inplace=True)

#Apagando as linhas com valores nulos
df.dropna(inplace=True)

#Apagando as linhas com valores nulo com base apenas em 1 coluna
df.dropna(subset=["Vendas"],inplace=True)

#Removendo linhas que estejam com valores faltantes em todas as colunas
df.dropna(how="all",inplace=True)

"""# **Criando colunas novas**"""

#Criando a coluna de receita
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

#Criando uma nova coluna para saber a quantidade de produtos vendidos
df["Receita/Vendas"] = df["Receita"] / df["Vendas"]

df.head()

#Retornando a maior receita
df["Receita"].max()

#Retornando a menor receita
df["Receita"].min()

#nlargest = pode escolher o top 3 maiores com base na coluna receita
df.nlargest(3,"Receita")

#nsmallest = pode escolher o top 3 menores com base na coluna receita
df.nsmallest(3,"Receita")

#Agrupamento por cidade
df.groupby("Cidade")["Receita"].sum()

#Ordenando o conjunto de dados pelas 10 maiores receitas
df.sort_values("Receita", ascending=False).head(10)

"""# **Trabalhando com datas**"""

#Transformando a columna de data em tipo de inteiro
df["Data"] = df["Data"].astype("int64")

#Verificando o tipo de dados de cada coluna
df.dtypes

#Transformando coluna de data em datetime
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#Agrupamento por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma nova coluna com o ano
df["Ano_venda"] = df["Data"].dt.year

df.sample(5)

#Extraindo o mês e o dia
df["mes_venda"],df["dia_venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

#Retornando a data mais antiga
df["Data"].min()

#Calculando a diferença de dias
df["diferenca_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#Criando a coluna de trimeste
df["Semestre_vendas"] = df["Data"].dt.quarter

df.sample(5)

#Filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19.sample(20)

"""# **Visualização de dados**"""

#Veririca quantas linhas temos com o valor do parametro, ou seja qtd de vendas
df["LojaID"].value_counts(ascending=False)

#Grafico de barras
df["LojaID"].value_counts(ascending=False).plot.bar()

#Grafico de barras horizontais descedente
df["LojaID"].value_counts(ascending=False).plot.barh()

#Grafico de barras horizontais ascedente 
df["LojaID"].value_counts(ascending=True).plot.barh()

#Grafico de Pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie();

#Total de vendas por cidade
df["Cidade"].value_counts();

#Total de vendas por cidade
df["Cidade"].value_counts().plot.bar(title="Total vendas por Cidade");

#Adicionando um titulo e alterando o nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="Total vendas por Cidade")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

#Adicionando um titulo e alterando o nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="Total vendas por Cidade")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

#Alterando a cor
df["Cidade"].value_counts().plot.bar(title="Total vendas por Cidade",color="red")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

#Alterando o estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title="Total Produtos vendidos por mês");
plt.xlabel("Mês")
plt.ylabel("Total Produtos vendidos");
plt.legend()

#Soma dos produtos vendidos de cada mês
df.groupby(df["mes_venda"])["Qtde"].sum()

#Selecionando apenas as vendas de 2019
df_2019 = df[df["Ano_venda"] == 2019]

#Total vendido por mês
df.groupby(df["mes_venda"])["Qtde"].sum().plot(title="Total Produtos vendidos por mês", marker = "o");
plt.xlabel("Mês")
plt.ylabel("Total Produtos vendidos");
plt.legend()

#Histograma
plt.hist(df["Qtde"], color="red");
plt.title("Quantidade de produtos vendidos")

#Grafico de dispersão
plt.scatter(x=df_2019["dia_venda"], y = df_2019["Receita"]);
plt.title("Dias de vendas e receita")

#Salvando em png
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker="v");
plt.title("Quantidade de produtos vendidos x mês")
plt.xlabel("mês")
plt.ylabel("Total de produtos vendidos")
plt.legend()
plt.savefig("Grafico QTDE x MES.png")



